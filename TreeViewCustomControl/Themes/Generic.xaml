<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:TreeViewCustomControl">
    
    <!--<Style TargetType="{x:Type local:TreeViewCustom}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TreeViewCustom}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <!-- Шаблон отображения(юзер интерфейс) -->
    <!--Конвертер для отступов предметов-->
    <local:TreeViewCustomConverter x:Key="TreeViewCustomConverter"/>

    <!--Шаблон управления для TreeViewItem .-->
    <ControlTemplate TargetType="TreeViewItem" x:Key="TreeViewCustomItem">
        <!--Сетка, содержащая текущую информацию и подузлы.-->
        <StackPanel>
            <!--Пограничная упаковка содержимого презентатора.-->
            <Border x:Name="Border" >
                <!--GridViewRowPrsenter содержит текущую информацию.-->
                <GridViewRowPresenter Content="{TemplateBinding Header}"
                    Columns="{Binding Columns, 
                    RelativeSource={RelativeSource Mode=FindAncestor, 
                    AncestorType=local:TreeViewCustom}}"/>
            </Border>
            <!--ItemsPresenter, содержащий подузлы -->
            <ItemsPresenter x:Name="ItemsPresenter" Visibility="Collapsed" />
        </StackPanel>
        <ControlTemplate.Triggers>
            <!--Триггер, используемый для отображения подпунктов-->
            <Trigger Property="IsExpanded" Value="True">
                <Setter TargetName="ItemsPresenter" Property="Visibility" Value="Visible"/>

            </Trigger>
            <!--Триггер, используемый для изменения цвета на основе выбора-->
            <Trigger Property="IsSelected" Value="true">
                <!-- Изменить цвет фона-->
                <Setter TargetName="Border" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                <!--Изменение цвета переднего плана-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
            </Trigger>
            <!--Триггер, используемый для изменения цвета на основе выбора-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <!--Change the background color-->
                <Setter TargetName="Border" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                <!--Изменение цвета переднего плана-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            </MultiTrigger>
            <!--Триггер, используемый для изменения цвета в зависимости от состояния элемента-->
            <Trigger Property="IsEnabled" Value="false">
                <!--Изменение цвета переднего плана-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Шаблон управления для TreeViewCustomExpander.-->
    <ControlTemplate TargetType="{x:Type local:TreeViewCustomExpander}" x:Key="TreeViewCustomExpander">

        <StackPanel Orientation="Horizontal" x:Name="ContainerElement">
            <!-- элемент FrameworkElement для отступов кнопки-->
            <FrameworkElement Width="{Binding RelativeSource={x:Static RelativeSource.Self}, 
                Converter={StaticResource TreeViewCustomConverter}}"/>
            <!-- кнопка переключения-->
            <ToggleButton IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource Mode=FindAncestor,
                AncestorType=TreeViewItem}}" />
        </StackPanel>
        <ControlTemplate.Triggers>
            <!--Триггер, используемый для отображения / скрытия кнопки расширения-->
            <DataTrigger Binding="{Binding HasItems, RelativeSource={RelativeSource Mode=FindAncestor,
                AncestorType=TreeViewItem}}" Value="False">
                <Setter TargetName="ContainerElement" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--стиль ко всем элементам управления типа TreeViewCustom.-->
    <Style TargetType="{x:Type local:TreeViewCustom}">
        <!-- шаблон управления-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TreeViewCustom}">
                    <ControlTemplate.Resources>
                        <!--стиль ко всем «TreeViewItem».-->
                        <Style TargetType="TreeViewItem">
                            <Setter Property="Template" Value="{StaticResource TreeViewCustomItem}"/>
                        </Style>
                        <!--стиль ко всем «TreeViewCustomExpander».-->
                        <Style TargetType="local:TreeViewCustomExpander">
                            <Setter Property="Template" Value="{StaticResource TreeViewCustomExpander}"/>
                        </Style>

                    </ControlTemplate.Resources>
                    <!--  рамка вокруг «TreeViewCustom».-->
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <!--ScrollViewer, обеспечивающий горизонтальную прокрутку
                         как для контента, так и для заголовков-->
                        <ScrollViewer HorizontalScrollBarVisibility="Auto"
                                      VerticalScrollBarVisibility="Disabled">
                            <!--Сетка, содержащая строку заголовка и все строки содержимого.-->
                            <Grid>
                                <Grid.RowDefinitions>
                                    <!--Строка заголовка.-->
                                    <RowDefinition Height="Auto"/>
                                    <!--Строка содержимого.-->
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <!--Строка заголовка.-->
                                <GridViewHeaderRowPresenter Columns="{TemplateBinding Columns}"
                                    AllowsColumnReorder="{TemplateBinding AllowsColumnReorder}"/>
                                <!--ScrollViewer обеспечивает вертикальную прокрутку
                                 функциональность для контента.-->
                                <ScrollViewer HorizontalScrollBarVisibility="Disabled"
                                              VerticalScrollBarVisibility="Auto"
                                              Grid.Row="1">
                                    <!--ItemsPresenter containg the content.-->
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
