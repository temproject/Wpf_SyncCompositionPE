<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:TreeView="clr-namespace:HierarchicalTreeControl.Model"
    xmlns:loadControl="clr-namespace:LoadingWindow;assembly=LoadingWindow"
    xmlns:local="clr-namespace:HierarchicalTreeControl">
    <!-- Ключевые свойства стиля: 
	o Setters – коллекция объектов, которые автоматически устанавливают значение свойств элементов управления. 
	o Triggers – коллекция объектов, которые позволяют автоматически изменять параметры стиля. 
	o BasedOn – для создания стиля, который наследует другой стиль и переопределят его значения. 
	o TargetType – указывает тип элементов на которые действует стиль.  

  Триггеры – декларативный подход к отслеживанию изменения по определенному условию и применения соответствующего стиля. 
    
  ******* Основные типы триггеров: 
	o Trigger – Самый простой триггер. Следит за изменением значения свойства. 
	o MultiTrigger – Похож на первый но срабатывает при выполнении множества условий. 
	o DataTrigger – Срабатывает при изменении в связанных с ним данных. 
	o MultiDataTrigger – множество триггеров данных. 
	o EventTrigger – При возникновении события он применяет соответствующую анимацию.  -->

    <!-- Шаблон отображения(юзер интерфейс) -->
    <!--Конвертер для отступов предметов-->
    <TreeView:TreeViewCustomConverter x:Key="TreeViewCustomConverter"/>

    <!--<Style TargetType="{x:Type TreeViewItem}">
        -->
    <!--<Setter Property="HorizontalContentAlignment" Value="Stretch" />-->
    <!--
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>-->

    <!-- стиль кнопки ToggleButton -->
    <Style x:Key="ExpandCollapseToggleStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="#FF1F3B53"/>
        <Setter Property="Foreground" Value="#FF000000"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFA3AEB9" Offset="0"/>
                    <GradientStop Color="#FF8399A9" Offset="0.375"/>
                    <GradientStop Color="#FF718597" Offset="0.375"/>
                    <GradientStop Color="#FF617584" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="19"
                    Height="13"
                    Background="Transparent">
                        <Border Width="9"
                      Height="9"
                      BorderThickness="1"
                      BorderBrush="#FF7898B5"
                      CornerRadius="1"
                      SnapsToDevicePixels="true">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0"
                                       EndPoint="1,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStop Color="White"
                                    Offset=".2"/>
                                        <GradientStop Color="#FFC0B7A6"
                                    Offset="1"/>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Path x:Name="ExpandPath"
                      Margin="1,1,1,1"
                      Fill="Black"
                      Data="M 0 2 L 0 3 L 2 3 L 2 5 L 3 5 L 3 3 
                            L 5 3 L 5 2 L 3 2 L 3 0 L 2 0 L 2 2 Z"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                       Value="True">
                            <Setter Property="Data"
                        TargetName="ExpandPath"
                        Value="M 0 2 L 0 3 L 5 3 L 5 2 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Шаблон управления для TreeViewItem .-->
    <ControlTemplate TargetType="TreeViewItem" x:Key="TreeViewCustomItem">
        <!--Сетка, содержащая текущую информацию и подузлы.-->
        <StackPanel>
            <!--Пограничная упаковка содержимого презентатора.-->
            <Border x:Name="Border" >
                <!--GridViewRowPrsenter содержит текущую информацию.-->
                <GridViewRowPresenter Content="{TemplateBinding Header}"
                    Columns="{Binding Columns, 
                    RelativeSource={RelativeSource Mode=FindAncestor, 
                    AncestorType=TreeView:TreeViewCustom}}"/>
            </Border>
            <!--ItemsPresenter, содержащий подузлы -->
            <ItemsPresenter x:Name="ItemsPresenter" Visibility="Collapsed" />
        </StackPanel>
        <ControlTemplate.Triggers>


            <!-- если идет процесс загрузки, то дерево нужно заблокировать от редактирования-->
            <DataTrigger  Binding="{Binding Worker.IsWorkComplet}" Value="false">
                <Setter Property="IsEnabled" Value="false"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=IsSelectObjToSynch}" Value="true">
                <!--<Setter TargetName="Border" Property="Background"
                    Value="#7777C5"/>-->
                <Setter Property="Foreground" 
                    Value="Red"/>
            </DataTrigger>
            <!--Триггер, используемый для отображения подпунктов-->
            <Trigger Property="IsExpanded" Value="True">
                <Setter TargetName="ItemsPresenter" Property="Visibility" Value="Visible"/>
            </Trigger>
            <!--Триггер, используемый для изменения цвета на основе выбора-->
            <Trigger Property="IsSelected" Value="true">
                <!-- Изменить цвет фона-->
                <Setter TargetName="Border" Property="Background"
                    Value="#DBE3FF"/>
                <!--Изменение цвета переднего плана-->
                <!--<Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>-->
            </Trigger>
            <!--Триггер, используемый для изменения цвета на основе выбора-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <!--Change the background color-->
                <Setter TargetName="Border" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                <!--Изменение цвета переднего плана-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            </MultiTrigger>
            <!--Триггер, используемый для изменения цвета в зависимости от состояния элемента-->
            <Trigger Property="IsEnabled" Value="false">
                <!--Изменение цвета переднего плана-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Шаблон управления для TreeViewCustomExpander.-->
    <ControlTemplate TargetType="{x:Type TreeView:TreeViewCustomExpander}" x:Key="TreeViewCustomExpander">

        <StackPanel Orientation="Horizontal" x:Name="ContainerElement">
            <!-- элемент FrameworkElement для отступов кнопки-->
            <FrameworkElement Width="{Binding RelativeSource={x:Static RelativeSource.Self}, 
                Converter={StaticResource TreeViewCustomConverter}}"/>
            <!-- кнопка переключения-->
            <ToggleButton  Style="{StaticResource ExpandCollapseToggleStyle}"  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource Mode=FindAncestor,
                AncestorType=TreeViewItem}}"/>
        </StackPanel>
        <ControlTemplate.Triggers>
            <!--Триггер, используемый для отображения / скрытия кнопки расширения-->
            <DataTrigger Binding="{Binding HasItems, RelativeSource={RelativeSource Mode=FindAncestor,
                AncestorType=TreeViewItem}}" Value="False">
                <Setter TargetName="ContainerElement" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--стиль ко всем элементам управления типа TreeViewCustom.-->
    <Style TargetType="{x:Type TreeView:TreeViewCustom}">
        <!-- шаблон управления-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView:TreeViewCustom}">
                    <ControlTemplate.Resources>
                        <!--стиль ко всем «TreeViewItem».-->
                        <Style TargetType="TreeViewItem">
                            <Setter Property="Template" Value="{StaticResource TreeViewCustomItem}"/>
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                            <Setter Property="FontWeight" Value="Normal" />
                        </Style>
                        <!--стиль ко всем «TreeViewCustomExpander».-->
                        <Style TargetType="TreeView:TreeViewCustomExpander">
                            <Setter Property="Template" Value="{StaticResource TreeViewCustomExpander}"/>
                        </Style>

                    </ControlTemplate.Resources>
                    <!--  рамка вокруг «TreeViewCustom».-->
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <!--ScrollViewer, обеспечивающий горизонтальную прокрутку
                         как для контента, так и для заголовков-->
                        <ScrollViewer HorizontalScrollBarVisibility="Auto"
                                      VerticalScrollBarVisibility="Disabled">
                            <!--Сетка, содержащая строку заголовка и все строки содержимого.-->
                            <Grid>
                                <Grid.RowDefinitions>
                                    <!--Строка заголовка.-->
                                    <RowDefinition Height="Auto"/>
                                    <!--Строка содержимого.-->
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <!--Строка заголовка.-->
                                <GridViewHeaderRowPresenter Columns="{TemplateBinding Columns}"
                                    AllowsColumnReorder="{TemplateBinding AllowsColumnReorder}"/>
                                <!--ScrollViewer обеспечивает вертикальную прокрутку
                                 функциональность для контента.-->
                                <ScrollViewer HorizontalScrollBarVisibility="Disabled"
                                              VerticalScrollBarVisibility="Auto"
                                              Grid.Row="1">
                                    <!--ItemsPresenter containg the content.-->
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>

